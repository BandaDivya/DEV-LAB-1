import pandas as pd  # Import the pandas library for data manipulation and analysis
import seaborn as sbn  # Import seaborn for statistical data visualization
from sklearn.preprocessing import MinMaxScaler  # Import MinMaxScaler for normalization
from sklearn.preprocessing import StandardScaler  # Import StandardScaler for standardization
import matplotlib.pyplot as plt  # Import matplotlib for plotting

# Data dictionary containing sample data
data = {
    'name': ['divya', 'kavya', 'uday', 'mary', 'yadagiri'],  # Names of individuals
    'age': [24, 23, 21, 44, 54],  # Ages of individuals
    'income': [38000, 15000, 5000, 0, 16000],  # Income of individuals
    'heights': [165, 170, 180, 160, 175]  # Heights of individuals in cm
}

# Create a DataFrame from the data dictionary
df = pd.DataFrame(data)
print(df)  # Print the DataFrame to the console

# Check for duplicates in the DataFrame
print("Number of duplicates:", df.duplicated().sum())  # Print the count of duplicate rows
df_dup = df.drop_duplicates()  # Remove duplicate rows from the DataFrame
print("DataFrame after removing duplicates:")  # Print a message
print(df_dup)  # Print the DataFrame after duplicates have been removed

# Normalization of the 'heights' column
min_max_scaler = MinMaxScaler()  # Create an instance of MinMaxScaler
df['Normalized_heights'] = min_max_scaler.fit_transform(df[['heights']])  # Normalize heights and add to DataFrame
print("DataFrame with normalized heights:")  # Print a message
print(df)  # Print the DataFrame with normalized heights

# Standardization of the 'income' column
standard_scaler = StandardScaler()  # Create an instance of StandardScaler
df['Standard_income'] = standard_scaler.fit_transform(df[['income']])  # Standardize income and add to DataFrame
print("DataFrame with standardized income:")  # Print a message
print(df)  # Print the DataFrame with standardized income

# Formatting the 'income' column to a currency format
df['format_income'] = df['income'].apply(lambda x: "${:.2f}".format(x))  # Format income as currency
print("DataFrame with formatted income:")  # Print a message
print(df)  # Print the DataFrame with formatted income

# Outlier detection using the Interquartile Range (IQR) method
Q1 = df['income'].quantile(0.25)  # Calculate the first quartile (25th percentile)
Q3 = df['income'].quantile(0.75)  # Calculate the third quartile (75th percentile)
IQR = Q3 - Q1  # Calculate the Interquartile Range
Upper_Limit = Q3 + 1.5 * IQR  # Calculate the upper limit for outliers
Lower_Limit = Q1 - 1.5 * IQR  # Calculate the lower limit for outliers
new_df = df.loc[(df['income'] < Upper_Limit) & (df['income'] > Lower_Limit)]  # Filter out outliers
print("DataFrame after outlier detection:")  # Print a message
print(new_df)  # Print the DataFrame after outlier detection

# Number of outliers removed
print("Number of outliers removed:", len(df) - len(new_df))  # Print the count of outliers removed

# Capping outlier values to the upper and lower limits
new_df = df.copy()  # Create a copy of the original DataFrame
new_df.loc[new_df['income'] > Upper_Limit, 'income'] = Upper_Limit  # Cap upper outliers
new_df.loc[new_df['income'] < Lower_Limit, 'income'] = Lower_Limit  # Cap lower outliers

# Plotting the boxplot of the 'income' column after capping outliers
plt.figure(figsize=(10, 6))  # Set the figure size for the plot
sbn.boxplot(new_df['income'])  # Create a boxplot for the 'income' column
plt.title('Boxplot of Income after Capping Outliers')  # Set the title of the plot
plt.show()  # Display the plot

# Display the modified DataFrame with capped outliers
print(new_df)  # Print the DataFrame after capping outliers
